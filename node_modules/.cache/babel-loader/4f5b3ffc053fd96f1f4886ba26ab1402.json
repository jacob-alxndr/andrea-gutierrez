{"ast":null,"code":"var _jsxFileName = \"/Users/Jamartinez510/Sites/projects/andrea-react/src/js/components/Lightbox.js\";\nimport React, { Component } from \"react\";\nimport ImageCard from \"./ImageCard\";\nexport default class Lightbox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDisplayed: []\n    };\n    this.updateDisplay = this.updateDisplay.bind(this);\n    this.handleDirection = this.handleDirection.bind(this);\n  }\n\n  componentDidMount() {\n    const displayedList = Array.from({\n      length: this.props.imageSet.length\n    }).map((img, i) => i === 0 ? true : false);\n    this.setState({\n      isDisplayed: displayedList\n    });\n    document.addEventListener(\"keydown\", this.handleDirection);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.imageSet !== this.props.imageSet) {\n      const displayedList = Array.from({\n        length: this.props.imageSet.length\n      }).map((img, i) => i === 0 ? true : false);\n      this.setState({\n        isDisplayed: displayedList\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleDirection);\n  }\n\n  handleDirection(e) {\n    console.log(e.currentTarget.innerText);\n    const direction = e.currentTarget.innerText;\n    const index = this.state.isDisplayed.findIndex(i => i === true);\n\n    if (e.code === \"ArrowLeft\" || direction === \"Prev\") {\n      this.updateDisplay(index, true);\n    } else if (e.code === \"ArrowRight\" || direction === \"Next\") {\n      this.updateDisplay(index);\n    } else {\n      return false;\n    }\n  }\n\n  updateDisplay(index, back = false) {\n    const newDisplayed = this.state.isDisplayed.map(img => false);\n\n    if (back) {\n      if (index - 1 < 0) {\n        newDisplayed[this.state.isDisplayed.length - 1] = true;\n      } else if (index - 1 >= 0) {\n        console.log(\"else if\");\n        newDisplayed[index - 1] = true;\n      }\n    } else if (back === false) {\n      if (index + 1 > this.state.isDisplayed.length - 1) {\n        newDisplayed[0] = true;\n      } else if (index + 1 <= this.state.isDisplayed.length - 1) {\n        newDisplayed[index + 1] = true;\n      }\n    }\n\n    this.setState({\n      isDisplayed: newDisplayed\n    }, function () {\n      const index = this.state.isDisplayed.findIndex(i => i === true);\n      this.props.updateIndex(index);\n    });\n  }\n\n  render() {\n    const {\n      isDisplayed\n    } = this.state;\n    console.log(this.props.imageSet);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Lightbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleDirection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, \"Prev\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Lightbox__container\",\n      tabIndex: 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, this.props.imageSet.map((img, i) => {\n      return /*#__PURE__*/React.createElement(ImageCard, {\n        styles: \"home\",\n        index: i,\n        updateDisplay: this.updateDisplay,\n        key: i,\n        src: img.url,\n        alt: img.alt,\n        display: isDisplayed[i],\n        images: img.images,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }\n      });\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleDirection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, \"Next\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/Jamartinez510/Sites/projects/andrea-react/src/js/components/Lightbox.js"],"names":["React","Component","ImageCard","Lightbox","constructor","props","state","isDisplayed","updateDisplay","bind","handleDirection","componentDidMount","displayedList","Array","from","length","imageSet","map","img","i","setState","document","addEventListener","componentDidUpdate","prevProps","componentWillUnmount","removeEventListener","e","console","log","currentTarget","innerText","direction","index","findIndex","code","back","newDisplayed","updateIndex","render","url","alt","images"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ImageCard from \"./ImageCard\";\nexport default class Lightbox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDisplayed: [],\n    };\n    this.updateDisplay = this.updateDisplay.bind(this);\n    this.handleDirection = this.handleDirection.bind(this);\n  }\n\n  componentDidMount() {\n    const displayedList = Array.from({\n      length: this.props.imageSet.length,\n    }).map((img, i) => (i === 0 ? true : false));\n    this.setState({ isDisplayed: displayedList });\n    document.addEventListener(\"keydown\", this.handleDirection);\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.imageSet !== this.props.imageSet) {\n      const displayedList = Array.from({\n        length: this.props.imageSet.length,\n      }).map((img, i) => (i === 0 ? true : false));\n      this.setState({ isDisplayed: displayedList });\n    }\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleDirection);\n  }\n  handleDirection(e) {\n    console.log(e.currentTarget.innerText);\n    const direction = e.currentTarget.innerText;\n    const index = this.state.isDisplayed.findIndex((i) => i === true);\n    if (e.code === \"ArrowLeft\" || direction === \"Prev\") {\n      this.updateDisplay(index, true);\n    } else if (e.code === \"ArrowRight\" || direction === \"Next\") {\n      this.updateDisplay(index);\n    } else {\n      return false;\n    }\n  }\n  updateDisplay(index, back = false) {\n    const newDisplayed = this.state.isDisplayed.map((img) => false);\n    if (back) {\n      if (index - 1 < 0) {\n        newDisplayed[this.state.isDisplayed.length - 1] = true;\n      } else if (index - 1 >= 0) {\n        console.log(\"else if\");\n        newDisplayed[index - 1] = true;\n      }\n    } else if (back === false) {\n      if (index + 1 > this.state.isDisplayed.length - 1) {\n        newDisplayed[0] = true;\n      } else if (index + 1 <= this.state.isDisplayed.length - 1) {\n        newDisplayed[index + 1] = true;\n      }\n    }\n    this.setState({ isDisplayed: newDisplayed }, function () {\n      const index = this.state.isDisplayed.findIndex((i) => i === true);\n      this.props.updateIndex(index);\n    });\n  }\n\n  render() {\n    const { isDisplayed } = this.state;\n\n    console.log(this.props.imageSet);\n    return (\n      <div className=\"Lightbox\">\n        <button onClick={this.handleDirection}>Prev</button>\n        <div className=\"Lightbox__container\" tabIndex={0}>\n          {this.props.imageSet.map((img, i) => {\n            return (\n              <ImageCard\n                styles={\"home\"}\n                index={i}\n                updateDisplay={this.updateDisplay}\n                key={i}\n                src={img.url}\n                alt={img.alt}\n                display={isDisplayed[i]}\n                images={img.images}\n              />\n            );\n          })}\n        </div>\n        <button onClick={this.handleDirection}>Next</button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
@import url(https://fonts.googleapis.com/css?family=Work+Sans:100,200,300,400,500,700);@-webkit-keyframes hideTitle{0%{-webkit-transform:translateX(0vh);transform:translateX(0vh)}100%{-webkit-transform:translateX(-100vh);transform:translateX(-100vh)}}@keyframes hideTitle{0%{-webkit-transform:translateX(0vh);transform:translateX(0vh)}100%{-webkit-transform:translateX(-100vh);transform:translateX(-100vh)}}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}html{box-sizing:border-box;font-size:62.5%}html.open{overflow-y:hidden;-webkit-overflow-scrolling:none}*,::after,::before{box-sizing:inherit;margin:0;padding:0}main{display:block}::-moz-selection{color:#f1f1f1;background-color:#010101}::selection{color:#f1f1f1;background-color:#010101}a{color:inherit;background-color:transparent;text-decoration:none}ul{list-style:none}button *{pointer-events:none}embed,iframe,img,object,video{display:block;max-width:100%;border-style:none}button,input,select,textarea{color:inherit;font:inherit;letter-spacing:inherit}body{font-family:'JetBrains Mono',sans-serif;font-size:1.4rem;line-height:1.5;color:#222;text-rendering:optimizeLegibility;-webkit-font-smoothing:subpixel-antialiased;-moz-osx-font-smoothing:grayscale}h1{font-size:4.883rem;font-weight:400}h2{font-size:3.906rem;font-weight:400}h3{font-size:3.125rem;font-weight:400}h4{font-size:2.5rem;font-weight:500}h5{font-family:'Times New Roman',Times,serif;font-size:1.6rem;font-weight:800}h6{font-size:1.5rem;font-weight:400}a{font-size:1.4rem}.paragraph{font-weight:400;font-size:1.6rem;line-height:1.3}.paragraph__small{font-size:1.2rem}.paragraph__grey{color:#505050}.small-uppercase{font-size:1.5rem;text-transform:uppercase;letter-spacing:2px}.u-container{max-width:120rem;margin:0 auto;padding-left:4rem;padding-right:4rem}.u-center-text{text-align:center}body{display:grid;grid-template-columns:[page-start] 1fr [content] repeat(12,[col-start] 1fr [col-end]) [content-end] 1fr [page-end]}.image-gallery{position:relative;-webkit-animation:fadeIn 1s ease-in-out;animation:fadeIn 1s ease-in-out}@media only screen and (max-width:37.5em){.image-gallery{margin:0}}.image-gallery .img-set:first-child{z-index:1;opacity:1}.image-gallery .img-set{opacity:0;width:48rem;position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);cursor:pointer}@media only screen and (max-width:60em){.image-gallery .img-set{width:100%;-webkit-transform:translate(0,0);transform:translate(0,0);top:0;left:0}}@media only screen and (max-width:37.5em){.image-gallery .img-set{opacity:1;position:relative;top:0;left:0;-webkit-transform:translate(0,0);transform:translate(0,0);margin-bottom:3rem;pointer-events:none}}.image-gallery .img-set img{width:100%}@media only screen and (max-width:37.5em){.image-gallery .img-set img{pointer-events:none}}.image-gallery .img-set.inView{opacity:1;cursor:pointer;-webkit-animation:fadeIn .5s;animation:fadeIn .5s}.image-gallery .img-set.top-left{top:0;left:10rem;width:45%;-webkit-transform:translate(0,0);transform:translate(0,0)}.image-gallery .img-set.top-right{top:0;right:10rem;width:45%;-webkit-transform:translate(0,0);transform:translate(0,0)}.image-gallery .img-set.bottom-left{bottom:0;left:10rem;width:45%;-webkit-transform:translate(0,-50%);transform:translate(0,-50%)}.image-gallery .img-set.bottom-right{bottom:0;right:10rem;width:45%;-webkit-transform:translate(0,-50%);transform:translate(0,-50%)}.header{display:-webkit-box;display:flex;position:relative;-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center;grid-column:col-start 1/col-end 4;-webkit-transition:all ease-in-out;transition:all ease-in-out}@media only screen and (max-width:60em){.header{-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}}@media only screen and (max-width:42em){.header{grid-column:col-start 1/col-end 4}}@media only screen and (max-width:37.5em){.header{grid-column:col-start 1/col-end 12;margin:0;-webkit-box-align:start;align-items:flex-start}}.header .heading{display:grid;-webkit-box-align:start;align-items:flex-start;height:100%}.header .heading span{font-size:1.2rem;color:#505050}@media only screen and (max-width:37.5em){.header .heading span{display:none}}.header h5{-webkit-animation:fadeIn .6s ease-in-out;animation:fadeIn .6s ease-in-out}@media only screen and (max-width:60em){.header h5{margin-bottom:2rem}}@media only screen and (max-width:37.5em){.header h5{margin-top:3rem}}.header h5.hide{-webkit-transform:translateX(-100vw);transform:translateX(-100vw)}.header .wrapper{display:-webkit-box;display:flex;height:100%;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:end;justify-content:flex-end;-webkit-animation:fadeIn .8s ease-in-out;animation:fadeIn .8s ease-in-out}@media only screen and (max-width:60em){.header .wrapper{-webkit-box-pack:start;justify-content:start}}.header .navigation{display:grid;-webkit-box-align:space-around;align-items:space-around;margin-bottom:23rem}@media only screen and (max-width:37.5em){.header .navigation{margin-bottom:3rem}}.header .navigation a{white-space:nowrap;-webkit-transition:color .2s ease;transition:color .2s ease}.header .navigation__list>:not(:last-child){margin-bottom:.5rem}.header .navigation__list:hover{color:#dbcebc}.header .navigation__item{display:-webkit-box;display:flex;-webkit-box-pack:start;justify-content:flex-start}.header .navigation__item a:hover{color:#5f4520}.header .featured{display:-webkit-box;display:flex;-webkit-box-pack:justify;justify-content:space-between;margin-bottom:3rem}@media only screen and (max-width:60em){.header .featured{margin:3rem 0 0 0}}@media only screen and (max-width:37.5em){.header .featured{display:none}}.header .featured h6{margin-right:1rem}body{padding:5rem 0 5rem 0rem;width:100vw;height:100vh;background-color:#fff9f1}@media only screen and (max-width:37.5em){body{padding:0rem}}body main{display:grid;grid-column:col-end 4/col-end 12}@media only screen and (max-width:60em){body main{grid-column:col-start 5/col-end 12}}@media only screen and (max-width:37.5em){body main{grid-column:col-start 1/col-end 12}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
